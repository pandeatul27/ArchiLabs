
D:/Jimson/FPGA/labs/Computer_Organization/ARM_lab_source_files/Standard/Exercise6/solutions/DE1-SoC/part3/part3.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	40 00 00 00 0c 08 00 00 10 08 00 00 14 08 00 00     @...............
  30:	18 08 00 00 08 08 00 00 1c 08 00 00 20 08 00 00     ............ ...

00000040 <__cs3_reset>:
  40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
  44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
  48:	e3560000 	cmp	r6, #0
  4c:	e92d4080 	push	{r7, lr}
  50:	e2466001 	sub	r6, r6, #1
  54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
  58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
  5c:	e3a00000 	mov	r0, #0
  60:	e3a01000 	mov	r1, #0
  64:	e515200c 	ldr	r2, [r5, #-12]
  68:	e515e010 	ldr	lr, [r5, #-16]
  6c:	e5154008 	ldr	r4, [r5, #-8]
  70:	e15e0002 	cmp	lr, r2
  74:	00822004 	addeq	r2, r2, r4
  78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
  7c:	e3540000 	cmp	r4, #0
  80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
  84:	e1a07002 	mov	r7, r2
  88:	e1a0c002 	mov	r12, r2
  8c:	e8be000c 	ldm	lr!, {r2, r3}
  90:	e8ac000c 	stmia	r12!, {r2, r3}
  94:	e067300c 	rsb	r3, r7, r12
  98:	e1540003 	cmp	r4, r3
  9c:	e1a0200c 	mov	r2, r12
  a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
  a4:	e515e004 	ldr	lr, [r5, #-4]
  a8:	e35e0000 	cmp	lr, #0
  ac:	11a03002 	movne	r3, r2
  b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
  b4:	e8a30003 	stmia	r3!, {r0, r1}
  b8:	e062c003 	rsb	r12, r2, r3
  bc:	e15e000c 	cmp	lr, r12
  c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
  c4:	e2466001 	sub	r6, r6, #1
  c8:	e3760001 	cmn	r6, #1
  cc:	e2855014 	add	r5, r5, #20
  d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
  d4:	eb0001b2 	bl	7a4 <__cs3_premain>
  d8:	00000001 	.word	0x00000001
  dc:	00000908 	.word	0x00000908

000000e0 <__cs3_start_asm_sim>:
  e0:	e28f103c 	add	r1, pc, #60	; 0x3c
  e4:	e3a00016 	mov	r0, #22
  e8:	ef123456 	svc	0x00123456
  ec:	e3500000 	cmp	r0, #0
  f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
  f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
  f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
  fc:	e5920008 	ldr	r0, [r2, #8]
 100:	e3500000 	cmp	r0, #0
 104:	11a0d000 	movne	sp, r0
 108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
 10c:	e5920004 	ldr	r0, [r2, #4]
 110:	e3500000 	cmp	r0, #0
 114:	15810000 	strne	r0, [r1]
 118:	eaffffc9 	b	44 <__cs3_start_c>
 11c:	3ffffff8 	.word	0x3ffffff8
 120:	00000d78 	.word	0x00000d78

00000124 <__cs3_heap_start_ptr>:
 124:	00000da0 	.word	0x00000da0

00000128 <_start>:
 128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
 12c:	eaffffc4 	b	44 <__cs3_start_c>
 130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
 134:	e92d4008 	push	{r3, lr}
 138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
 13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
 140:	e0603003 	rsb	r3, r0, r3
 144:	e3530006 	cmp	r3, #6
 148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
 14c:	e8bd4008 	pop	{r3, lr}
 150:	e12fff1e 	bx	lr
 154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
 158:	e3530000 	cmp	r3, #0
 15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
 160:	e1a0e00f 	mov	lr, pc
 164:	e12fff13 	bx	r3
 168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
 16c:	00000d80 	.word	0x00000d80
 170:	00000d83 	.word	0x00000d83
 174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
 178:	e92d4008 	push	{r3, lr}
 17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
 180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
 184:	e0603003 	rsb	r3, r0, r3
 188:	e1a03143 	asr	r3, r3, #2
 18c:	e0833fa3 	add	r3, r3, r3, lsr #31
 190:	e1b010c3 	asrs	r1, r3, #1
 194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
 198:	e8bd4008 	pop	{r3, lr}
 19c:	e12fff1e 	bx	lr
 1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
 1a4:	e3520000 	cmp	r2, #0
 1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
 1ac:	e1a0e00f 	mov	lr, pc
 1b0:	e12fff12 	bx	r2
 1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
 1b8:	00000d80 	.word	0x00000d80
 1bc:	00000d80 	.word	0x00000d80
 1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
 1c4:	e92d4010 	push	{r4, lr}
 1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
 1cc:	e5d43000 	ldrb	r3, [r4]
 1d0:	e3530000 	cmp	r3, #0
 1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
 1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
 1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
 1e0:	e3530000 	cmp	r3, #0
 1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
 1e8:	1320f000 	nopne	{0}
 1ec:	e3a03001 	mov	r3, #1
 1f0:	e5c43000 	strb	r3, [r4]
 1f4:	e8bd4010 	pop	{r4, lr}
 1f8:	e12fff1e 	bx	lr
 1fc:	00000d80 	.word	0x00000d80
 200:	00000000 	.word	0x00000000
 204:	000008ac 	.word	0x000008ac

00000208 <frame_dummy>:
 208:	e92d4008 	push	{r3, lr}
 20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
 210:	e3530000 	cmp	r3, #0
 214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
 218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
 21c:	1320f000 	nopne	{0}
 220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
 224:	e5903000 	ldr	r3, [r0]
 228:	e3530000 	cmp	r3, #0
 22c:	0a000003 	beq	240 <frame_dummy+0x38>
 230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
 234:	e3530000 	cmp	r3, #0
 238:	11a0e00f 	movne	lr, pc
 23c:	112fff13 	bxne	r3
 240:	e8bd4008 	pop	{r3, lr}
 244:	eaffffcb 	b	178 <register_tm_clones>
 248:	00000000 	.word	0x00000000
 24c:	000008ac 	.word	0x000008ac
 250:	00000d84 	.word	0x00000d84
 254:	00000908 	.word	0x00000908
 258:	00000000 	.word	0x00000000

0000025c <ONES>:

int ONES(int data)
{
	int i, shift;

	for (i = 0; data != 0; i++)
 25c:	e2503000 	subs	r3, r0, #0
 260:	0a000004 	beq	278 <ONES+0x1c>
 264:	e3a00000 	mov	r0, #0
 268:	e2800001 	add	r0, r0, #1
 26c:	e01330a3 	ands	r3, r3, r3, lsr #1
 270:	1afffffc 	bne	268 <ONES+0xc>
 274:	e12fff1e 	bx	lr
 278:	e3a00000 	mov	r0, #0
	{
		shift = (data >> 1) & 0x7FFFFFFF;	// shift right logical
		data = data & shift;
	}
	return (i);
}
 27c:	e12fff1e 	bx	lr

00000280 <ZEROS>:
int ZEROS(int data)
{
 280:	e92d4008 	push	{r3, lr}
	return (ONES (data ^ 0xFFFFFFFF));
 284:	e1e00000 	mvn	r0, r0
 288:	ebfffff3 	bl	25c <ONES>
}
 28c:	e8bd8008 	pop	{r3, pc}

00000290 <ALTERNATE>:
int ALTERNATE(int data)
{
 290:	e92d4038 	push	{r3, r4, r5, lr}
	int ret_val1, ret_val0;
	
	data = data ^ 0x55555555;
 294:	e3054555 	movw	r4, #21845	; 0x5555
 298:	e3454555 	movt	r4, #21845	; 0x5555
 29c:	e0204004 	eor	r4, r0, r4
	ret_val1 = ONES (data);
 2a0:	e1a00004 	mov	r0, r4
 2a4:	ebffffec 	bl	25c <ONES>
 2a8:	e1a05000 	mov	r5, r0
	ret_val0 = ZEROS (data);
 2ac:	e1a00004 	mov	r0, r4
 2b0:	ebfffff2 	bl	280 <ZEROS>

	return (ret_val1 > ret_val0 ? ret_val1 : ret_val0);
}
 2b4:	e1500005 	cmp	r0, r5
 2b8:	b1a00005 	movlt	r0, r5
 2bc:	e8bd8038 	pop	{r3, r4, r5, pc}

000002c0 <main>:
						 0x00000000};
char seg7[10] =	{0b00111111, 0b00000110, 0b01011011, 0b01001111, 0b01100110, 
						 0b01101101, 0b01111101, 0b00000111, 0b01111111, 0b01100111};

int main(void)
{
 2c0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	int data, long_1s = 0, long_0s = 0, long_alt = 0, ret_val, i;
	volatile int * HEX3_HEX0_ptr = (int *) HEX3_HEX0_BASE;
	volatile int * HEX5_HEX4_ptr = (int *) HEX5_HEX4_BASE;

	data = TEST_NUM[0];
 2c4:	e3003910 	movw	r3, #2320	; 0x910
 2c8:	e3403000 	movt	r3, #0
 2cc:	e5937000 	ldr	r7, [r3]
	for (i = 1; data != 0; i++)
 2d0:	e3570000 	cmp	r7, #0
 2d4:	0a000049 	beq	400 <main+0x140>
 2d8:	e1a08003 	mov	r8, r3
char seg7[10] =	{0b00111111, 0b00000110, 0b01011011, 0b01001111, 0b01100110, 
						 0b01101101, 0b01111101, 0b00000111, 0b01111111, 0b01100111};

int main(void)
{
	int data, long_1s = 0, long_0s = 0, long_alt = 0, ret_val, i;
 2dc:	e3a04000 	mov	r4, #0
 2e0:	e1a05004 	mov	r5, r4
 2e4:	e1a06004 	mov	r6, r4
	volatile int * HEX5_HEX4_ptr = (int *) HEX5_HEX4_BASE;

	data = TEST_NUM[0];
	for (i = 1; data != 0; i++)
	{
		ret_val = ONES(data);
 2e8:	e1a00007 	mov	r0, r7
 2ec:	ebffffda 	bl	25c <ONES>
 2f0:	e1560000 	cmp	r6, r0
 2f4:	b1a06000 	movlt	r6, r0
		if (ret_val > long_1s)
			long_1s = ret_val;
		ret_val = ZEROS(data);
 2f8:	e1a00007 	mov	r0, r7
 2fc:	ebffffdf 	bl	280 <ZEROS>
 300:	e1550000 	cmp	r5, r0
 304:	b1a05000 	movlt	r5, r0
		if (ret_val > long_0s)
			long_0s = ret_val;
		ret_val = ALTERNATE(data);
 308:	e1a00007 	mov	r0, r7
 30c:	ebffffdf 	bl	290 <ALTERNATE>
 310:	e1540000 	cmp	r4, r0
 314:	b1a04000 	movlt	r4, r0
		if (ret_val > long_alt)
			long_alt = ret_val;
		data = TEST_NUM[i];
 318:	e5b87004 	ldr	r7, [r8, #4]!
	int data, long_1s = 0, long_0s = 0, long_alt = 0, ret_val, i;
	volatile int * HEX3_HEX0_ptr = (int *) HEX3_HEX0_BASE;
	volatile int * HEX5_HEX4_ptr = (int *) HEX5_HEX4_BASE;

	data = TEST_NUM[0];
	for (i = 1; data != 0; i++)
 31c:	e3570000 	cmp	r7, #0
 320:	1afffff0 	bne	2e8 <main+0x28>
		if (ret_val > long_alt)
			long_alt = ret_val;
		data = TEST_NUM[i];
	}
	/* display count of number of 1's */
	for (i = 0; long_1s > 9; i++)
 324:	e3560009 	cmp	r6, #9
 328:	d3a03000 	movle	r3, #0
 32c:	da000005 	ble	348 <main+0x88>
 330:	e3a03000 	mov	r3, #0
		long_1s -= 10;
 334:	e246600a 	sub	r6, r6, #10
		if (ret_val > long_alt)
			long_alt = ret_val;
		data = TEST_NUM[i];
	}
	/* display count of number of 1's */
	for (i = 0; long_1s > 9; i++)
 338:	e2833001 	add	r3, r3, #1
 33c:	e3560009 	cmp	r6, #9
 340:	cafffffb 	bgt	334 <main+0x74>
 344:	eaffffff 	b	348 <main+0x88>
		long_1s -= 10;
	*HEX3_HEX0_ptr = seg7[i] << 8;
 348:	e3002910 	movw	r2, #2320	; 0x910
 34c:	e3402000 	movt	r2, #0
 350:	e0823003 	add	r3, r2, r3
 354:	e5d3102c 	ldrb	r1, [r3, #44]	; 0x2c
 358:	e1a01401 	lsl	r1, r1, #8
 35c:	e3a03000 	mov	r3, #0
 360:	e34f3f20 	movt	r3, #65312	; 0xff20
 364:	e5831020 	str	r1, [r3, #32]
	*HEX3_HEX0_ptr |= seg7[long_1s];
 368:	e5931020 	ldr	r1, [r3, #32]
 36c:	e0826006 	add	r6, r2, r6
 370:	e5d6202c 	ldrb	r2, [r6, #44]	; 0x2c
 374:	e1822001 	orr	r2, r2, r1
 378:	e5832020 	str	r2, [r3, #32]

	/* display count of number of 0's */
	for (i = 0; long_0s > 9; i++)
 37c:	e3550009 	cmp	r5, #9
 380:	d3a03000 	movle	r3, #0
 384:	da000005 	ble	3a0 <main+0xe0>
 388:	e3a03000 	mov	r3, #0
		long_0s -= 10;
 38c:	e245500a 	sub	r5, r5, #10
		long_1s -= 10;
	*HEX3_HEX0_ptr = seg7[i] << 8;
	*HEX3_HEX0_ptr |= seg7[long_1s];

	/* display count of number of 0's */
	for (i = 0; long_0s > 9; i++)
 390:	e2833001 	add	r3, r3, #1
 394:	e3550009 	cmp	r5, #9
 398:	cafffffb 	bgt	38c <main+0xcc>
 39c:	eaffffff 	b	3a0 <main+0xe0>
		long_0s -= 10;
	*HEX3_HEX0_ptr |= seg7[i] << 24;
 3a0:	e3a02000 	mov	r2, #0
 3a4:	e34f2f20 	movt	r2, #65312	; 0xff20
 3a8:	e5920020 	ldr	r0, [r2, #32]
 3ac:	e3001910 	movw	r1, #2320	; 0x910
 3b0:	e3401000 	movt	r1, #0
 3b4:	e0813003 	add	r3, r1, r3
 3b8:	e5d3302c 	ldrb	r3, [r3, #44]	; 0x2c
 3bc:	e1803c03 	orr	r3, r0, r3, lsl #24
 3c0:	e5823020 	str	r3, [r2, #32]
	*HEX3_HEX0_ptr |= seg7[long_0s] << 16;
 3c4:	e5923020 	ldr	r3, [r2, #32]
 3c8:	e0815005 	add	r5, r1, r5
 3cc:	e5d5102c 	ldrb	r1, [r5, #44]	; 0x2c
 3d0:	e1833801 	orr	r3, r3, r1, lsl #16
 3d4:	e5823020 	str	r3, [r2, #32]

	/* display count of number of alternating 1's and 0's */
	for (i = 0; long_alt > 9; i++)
 3d8:	e3540009 	cmp	r4, #9
 3dc:	da000005 	ble	3f8 <main+0x138>
 3e0:	e3a03000 	mov	r3, #0
		long_alt -= 10;
 3e4:	e244400a 	sub	r4, r4, #10
		long_0s -= 10;
	*HEX3_HEX0_ptr |= seg7[i] << 24;
	*HEX3_HEX0_ptr |= seg7[long_0s] << 16;

	/* display count of number of alternating 1's and 0's */
	for (i = 0; long_alt > 9; i++)
 3e8:	e2833001 	add	r3, r3, #1
 3ec:	e3540009 	cmp	r4, #9
 3f0:	cafffffb 	bgt	3e4 <main+0x124>
 3f4:	ea000010 	b	43c <main+0x17c>
 3f8:	e3a03000 	mov	r3, #0
 3fc:	ea00000e 	b	43c <main+0x17c>
		data = TEST_NUM[i];
	}
	/* display count of number of 1's */
	for (i = 0; long_1s > 9; i++)
		long_1s -= 10;
	*HEX3_HEX0_ptr = seg7[i] << 8;
 400:	e3002910 	movw	r2, #2320	; 0x910
 404:	e3402000 	movt	r2, #0
 408:	e5d2102c 	ldrb	r1, [r2, #44]	; 0x2c
 40c:	e1a01401 	lsl	r1, r1, #8
 410:	e3a03000 	mov	r3, #0
 414:	e34f3f20 	movt	r3, #65312	; 0xff20
 418:	e5831020 	str	r1, [r3, #32]
	*HEX3_HEX0_ptr |= seg7[long_1s];
 41c:	e5931020 	ldr	r1, [r3, #32]
 420:	e5d2202c 	ldrb	r2, [r2, #44]	; 0x2c
 424:	e1822001 	orr	r2, r2, r1
 428:	e5832020 	str	r2, [r3, #32]
char seg7[10] =	{0b00111111, 0b00000110, 0b01011011, 0b01001111, 0b01100110, 
						 0b01101101, 0b01111101, 0b00000111, 0b01111111, 0b01100111};

int main(void)
{
	int data, long_1s = 0, long_0s = 0, long_alt = 0, ret_val, i;
 42c:	e3a04000 	mov	r4, #0
		long_1s -= 10;
	*HEX3_HEX0_ptr = seg7[i] << 8;
	*HEX3_HEX0_ptr |= seg7[long_1s];

	/* display count of number of 0's */
	for (i = 0; long_0s > 9; i++)
 430:	e1a03004 	mov	r3, r4
char seg7[10] =	{0b00111111, 0b00000110, 0b01011011, 0b01001111, 0b01100110, 
						 0b01101101, 0b01111101, 0b00000111, 0b01111111, 0b01100111};

int main(void)
{
	int data, long_1s = 0, long_0s = 0, long_alt = 0, ret_val, i;
 434:	e1a05004 	mov	r5, r4
 438:	eaffffd8 	b	3a0 <main+0xe0>
	*HEX3_HEX0_ptr |= seg7[long_0s] << 16;

	/* display count of number of alternating 1's and 0's */
	for (i = 0; long_alt > 9; i++)
		long_alt -= 10;
	*HEX5_HEX4_ptr = seg7[i] << 8;
 43c:	e3002910 	movw	r2, #2320	; 0x910
 440:	e3402000 	movt	r2, #0
 444:	e0823003 	add	r3, r2, r3
 448:	e5d3102c 	ldrb	r1, [r3, #44]	; 0x2c
 44c:	e1a01401 	lsl	r1, r1, #8
 450:	e3a03000 	mov	r3, #0
 454:	e34f3f20 	movt	r3, #65312	; 0xff20
 458:	e5831030 	str	r1, [r3, #48]	; 0x30
	*HEX5_HEX4_ptr |= seg7[long_alt];
 45c:	e5931030 	ldr	r1, [r3, #48]	; 0x30
 460:	e0824004 	add	r4, r2, r4
 464:	e5d4202c 	ldrb	r2, [r4, #44]	; 0x2c
 468:	e1822001 	orr	r2, r2, r1
 46c:	e5832030 	str	r2, [r3, #48]	; 0x30
}
 470:	e3a00000 	mov	r0, #0
 474:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00000478 <atexit>:
 478:	e1a01000 	mov	r1, r0
 47c:	e3a00000 	mov	r0, #0
 480:	e92d4008 	push	{r3, lr}
 484:	e1a02000 	mov	r2, r0
 488:	e1a03000 	mov	r3, r0
 48c:	eb00000e 	bl	4cc <__register_exitproc>
 490:	e8bd4008 	pop	{r3, lr}
 494:	e12fff1e 	bx	lr

00000498 <exit>:
 498:	e92d4008 	push	{r3, lr}
 49c:	e3a01000 	mov	r1, #0
 4a0:	e1a04000 	mov	r4, r0
 4a4:	eb000045 	bl	5c0 <__call_exitprocs>
 4a8:	e59f3018 	ldr	r3, [pc, #24]	; 4c8 <exit+0x30>
 4ac:	e5930000 	ldr	r0, [r3]
 4b0:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
 4b4:	e3530000 	cmp	r3, #0
 4b8:	11a0e00f 	movne	lr, pc
 4bc:	112fff13 	bxne	r3
 4c0:	e1a00004 	mov	r0, r4
 4c4:	eb0000c9 	bl	7f0 <_exit>
 4c8:	000008b0 	.word	0x000008b0

000004cc <__register_exitproc>:
 4cc:	e59fc0e4 	ldr	r12, [pc, #228]	; 5b8 <__register_exitproc+0xec>
 4d0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 4d4:	e59c4000 	ldr	r4, [r12]
 4d8:	e594c148 	ldr	r12, [r4, #328]	; 0x148
 4dc:	e35c0000 	cmp	r12, #0
 4e0:	0284cf53 	addeq	r12, r4, #332	; 0x14c
 4e4:	e59c5004 	ldr	r5, [r12, #4]
 4e8:	0584c148 	streq	r12, [r4, #328]	; 0x148
 4ec:	e355001f 	cmp	r5, #31
 4f0:	e24dd010 	sub	sp, sp, #16
 4f4:	e1a06000 	mov	r6, r0
 4f8:	da000015 	ble	554 <__register_exitproc+0x88>
 4fc:	e59f00b8 	ldr	r0, [pc, #184]	; 5bc <__register_exitproc+0xf0>
 500:	e3500000 	cmp	r0, #0
 504:	1a000001 	bne	510 <__register_exitproc+0x44>
 508:	e3e00000 	mvn	r0, #0
 50c:	ea000018 	b	574 <__register_exitproc+0xa8>
 510:	e3a00e19 	mov	r0, #400	; 0x190
 514:	e58d100c 	str	r1, [sp, #12]
 518:	e58d2008 	str	r2, [sp, #8]
 51c:	e58d3004 	str	r3, [sp, #4]
 520:	e320f000 	nop	{0}
 524:	e250c000 	subs	r12, r0, #0
 528:	e59d100c 	ldr	r1, [sp, #12]
 52c:	e59d2008 	ldr	r2, [sp, #8]
 530:	e59d3004 	ldr	r3, [sp, #4]
 534:	0afffff3 	beq	508 <__register_exitproc+0x3c>
 538:	e5945148 	ldr	r5, [r4, #328]	; 0x148
 53c:	e3a00000 	mov	r0, #0
 540:	e58c0004 	str	r0, [r12, #4]
 544:	e58c5000 	str	r5, [r12]
 548:	e584c148 	str	r12, [r4, #328]	; 0x148
 54c:	e58c0188 	str	r0, [r12, #392]	; 0x188
 550:	e58c018c 	str	r0, [r12, #396]	; 0x18c
 554:	e3560000 	cmp	r6, #0
 558:	e59c4004 	ldr	r4, [r12, #4]
 55c:	1a000007 	bne	580 <__register_exitproc+0xb4>
 560:	e2843002 	add	r3, r4, #2
 564:	e2844001 	add	r4, r4, #1
 568:	e78c1103 	str	r1, [r12, r3, lsl #2]
 56c:	e58c4004 	str	r4, [r12, #4]
 570:	e3a00000 	mov	r0, #0
 574:	e28dd010 	add	sp, sp, #16
 578:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
 57c:	e12fff1e 	bx	lr
 580:	e3a00001 	mov	r0, #1
 584:	e1a00410 	lsl	r0, r0, r4
 588:	e08c8104 	add	r8, r12, r4, lsl #2
 58c:	e3560002 	cmp	r6, #2
 590:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
 594:	e5883108 	str	r3, [r8, #264]	; 0x108
 598:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
 59c:	e1877000 	orr	r7, r7, r0
 5a0:	01830000 	orreq	r0, r3, r0
 5a4:	e1a05008 	mov	r5, r8
 5a8:	e5882088 	str	r2, [r8, #136]	; 0x88
 5ac:	e58c7188 	str	r7, [r12, #392]	; 0x188
 5b0:	058c018c 	streq	r0, [r12, #396]	; 0x18c
 5b4:	eaffffe9 	b	560 <__register_exitproc+0x94>
 5b8:	000008b0 	.word	0x000008b0
 5bc:	00000000 	.word	0x00000000

000005c0 <__call_exitprocs>:
 5c0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 5c4:	e59f3168 	ldr	r3, [pc, #360]	; 734 <__call_exitprocs+0x174>
 5c8:	e5933000 	ldr	r3, [r3]
 5cc:	e24dd014 	sub	sp, sp, #20
 5d0:	e58d3004 	str	r3, [sp, #4]
 5d4:	e2833f52 	add	r3, r3, #328	; 0x148
 5d8:	e58d0008 	str	r0, [sp, #8]
 5dc:	e58d300c 	str	r3, [sp, #12]
 5e0:	e1a07001 	mov	r7, r1
 5e4:	e3a08001 	mov	r8, #1
 5e8:	e59d3004 	ldr	r3, [sp, #4]
 5ec:	e5936148 	ldr	r6, [r3, #328]	; 0x148
 5f0:	e3560000 	cmp	r6, #0
 5f4:	e59db00c 	ldr	r11, [sp, #12]
 5f8:	0a000033 	beq	6cc <__call_exitprocs+0x10c>
 5fc:	e5965004 	ldr	r5, [r6, #4]
 600:	e2554001 	subs	r4, r5, #1
 604:	5286a088 	addpl	r10, r6, #136	; 0x88
 608:	5285501f 	addpl	r5, r5, #31
 60c:	508a5105 	addpl	r5, r10, r5, lsl #2
 610:	5a000007 	bpl	634 <__call_exitprocs+0x74>
 614:	ea000029 	b	6c0 <__call_exitprocs+0x100>
 618:	e5953000 	ldr	r3, [r5]
 61c:	e1530007 	cmp	r3, r7
 620:	0a000005 	beq	63c <__call_exitprocs+0x7c>
 624:	e2444001 	sub	r4, r4, #1
 628:	e3740001 	cmn	r4, #1
 62c:	e2455004 	sub	r5, r5, #4
 630:	0a000022 	beq	6c0 <__call_exitprocs+0x100>
 634:	e3570000 	cmp	r7, #0
 638:	1afffff6 	bne	618 <__call_exitprocs+0x58>
 63c:	e5963004 	ldr	r3, [r6, #4]
 640:	e06a2005 	rsb	r2, r10, r5
 644:	e2433001 	sub	r3, r3, #1
 648:	e0862002 	add	r2, r6, r2
 64c:	e1530004 	cmp	r3, r4
 650:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
 654:	13a01000 	movne	r1, #0
 658:	05864004 	streq	r4, [r6, #4]
 65c:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
 660:	e3530000 	cmp	r3, #0
 664:	0affffee 	beq	624 <__call_exitprocs+0x64>
 668:	e1a02418 	lsl	r2, r8, r4
 66c:	e5961188 	ldr	r1, [r6, #392]	; 0x188
 670:	e1120001 	tst	r2, r1
 674:	e5969004 	ldr	r9, [r6, #4]
 678:	0a000016 	beq	6d8 <__call_exitprocs+0x118>
 67c:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
 680:	e1120001 	tst	r2, r1
 684:	1a000016 	bne	6e4 <__call_exitprocs+0x124>
 688:	e59d0008 	ldr	r0, [sp, #8]
 68c:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
 690:	e1a0e00f 	mov	lr, pc
 694:	e12fff13 	bx	r3
 698:	e5963004 	ldr	r3, [r6, #4]
 69c:	e1530009 	cmp	r3, r9
 6a0:	1affffd0 	bne	5e8 <__call_exitprocs+0x28>
 6a4:	e59b3000 	ldr	r3, [r11]
 6a8:	e1530006 	cmp	r3, r6
 6ac:	1affffcd 	bne	5e8 <__call_exitprocs+0x28>
 6b0:	e2444001 	sub	r4, r4, #1
 6b4:	e3740001 	cmn	r4, #1
 6b8:	e2455004 	sub	r5, r5, #4
 6bc:	1affffdc 	bne	634 <__call_exitprocs+0x74>
 6c0:	e59f1070 	ldr	r1, [pc, #112]	; 738 <__call_exitprocs+0x178>
 6c4:	e3510000 	cmp	r1, #0
 6c8:	1a000009 	bne	6f4 <__call_exitprocs+0x134>
 6cc:	e28dd014 	add	sp, sp, #20
 6d0:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 6d4:	e12fff1e 	bx	lr
 6d8:	e1a0e00f 	mov	lr, pc
 6dc:	e12fff13 	bx	r3
 6e0:	eaffffec 	b	698 <__call_exitprocs+0xd8>
 6e4:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
 6e8:	e1a0e00f 	mov	lr, pc
 6ec:	e12fff13 	bx	r3
 6f0:	eaffffe8 	b	698 <__call_exitprocs+0xd8>
 6f4:	e5963004 	ldr	r3, [r6, #4]
 6f8:	e3530000 	cmp	r3, #0
 6fc:	e5963000 	ldr	r3, [r6]
 700:	1a000008 	bne	728 <__call_exitprocs+0x168>
 704:	e3530000 	cmp	r3, #0
 708:	0a000006 	beq	728 <__call_exitprocs+0x168>
 70c:	e1a00006 	mov	r0, r6
 710:	e58b3000 	str	r3, [r11]
 714:	e320f000 	nop	{0}
 718:	e59b6000 	ldr	r6, [r11]
 71c:	e3560000 	cmp	r6, #0
 720:	1affffb5 	bne	5fc <__call_exitprocs+0x3c>
 724:	eaffffe8 	b	6cc <__call_exitprocs+0x10c>
 728:	e1a0b006 	mov	r11, r6
 72c:	e1a06003 	mov	r6, r3
 730:	eafffff9 	b	71c <__call_exitprocs+0x15c>
 734:	000008b0 	.word	0x000008b0
 738:	00000000 	.word	0x00000000

0000073c <register_fini>:
 73c:	e92d4008 	push	{r3, lr}
 740:	e59f3010 	ldr	r3, [pc, #16]	; 758 <register_fini+0x1c>
 744:	e3530000 	cmp	r3, #0
 748:	159f000c 	ldrne	r0, [pc, #12]	; 75c <register_fini+0x20>
 74c:	1bffff49 	blne	478 <atexit>
 750:	e8bd4008 	pop	{r3, lr}
 754:	e12fff1e 	bx	lr
 758:	000008d8 	.word	0x000008d8
 75c:	00000760 	.word	0x00000760

00000760 <__libc_fini_array>:
 760:	e92d4038 	push	{r3, r4, r5, lr}
 764:	e59f5030 	ldr	r5, [pc, #48]	; 79c <__libc_fini_array+0x3c>
 768:	e59f4030 	ldr	r4, [pc, #48]	; 7a0 <__libc_fini_array+0x40>
 76c:	e0654004 	rsb	r4, r5, r4
 770:	e1b04144 	asrs	r4, r4, #2
 774:	10855104 	addne	r5, r5, r4, lsl #2
 778:	0a000004 	beq	790 <__libc_fini_array+0x30>
 77c:	e5353004 	ldr	r3, [r5, #-4]!
 780:	e1a0e00f 	mov	lr, pc
 784:	e12fff13 	bx	r3
 788:	e2544001 	subs	r4, r4, #1
 78c:	1afffffa 	bne	77c <__libc_fini_array+0x1c>
 790:	eb000050 	bl	8d8 <__libc_fini>
 794:	e8bd4038 	pop	{r3, r4, r5, lr}
 798:	e12fff1e 	bx	lr
 79c:	000008f0 	.word	0x000008f0
 7a0:	000008f4 	.word	0x000008f4

000007a4 <__cs3_premain>:
 7a4:	e92d4008 	push	{r3, lr}
 7a8:	eb00001d 	bl	824 <__libc_init_array>
 7ac:	e59f3030 	ldr	r3, [pc, #48]	; 7e4 <__cs3_premain+0x40>
 7b0:	e3530000 	cmp	r3, #0
 7b4:	15930000 	ldrne	r0, [r3]
 7b8:	01a00003 	moveq	r0, r3
 7bc:	e59f3024 	ldr	r3, [pc, #36]	; 7e8 <__cs3_premain+0x44>
 7c0:	e3530000 	cmp	r3, #0
 7c4:	15931000 	ldrne	r1, [r3]
 7c8:	01a01003 	moveq	r1, r3
 7cc:	e3a02000 	mov	r2, #0
 7d0:	ebfffeba 	bl	2c0 <main>
 7d4:	e59f3010 	ldr	r3, [pc, #16]	; 7ec <__cs3_premain+0x48>
 7d8:	e3530000 	cmp	r3, #0
 7dc:	1bffff2d 	blne	498 <exit>
 7e0:	eafffffe 	b	7e0 <__cs3_premain+0x3c>
	...
 7ec:	00000498 	.word	0x00000498

000007f0 <_exit>:
 7f0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 7f4:	e3a00018 	mov	r0, #24
 7f8:	e59f1004 	ldr	r1, [pc, #4]	; 804 <_exit+0x14>
 7fc:	ef123456 	svc	0x00123456
 800:	eafffffe 	b	800 <_exit+0x10>
 804:	00020026 	.word	0x00020026

00000808 <__cs3_isr_interrupt>:
 808:	eafffffe 	b	808 <__cs3_isr_interrupt>

0000080c <__cs3_isr_undef>:
 80c:	eafffffe 	b	80c <__cs3_isr_undef>

00000810 <__cs3_isr_swi>:
 810:	eafffffe 	b	810 <__cs3_isr_swi>

00000814 <__cs3_isr_pabort>:
 814:	eafffffe 	b	814 <__cs3_isr_pabort>

00000818 <__cs3_isr_dabort>:
 818:	eafffffe 	b	818 <__cs3_isr_dabort>

0000081c <__cs3_isr_irq>:
 81c:	eafffffe 	b	81c <__cs3_isr_irq>

00000820 <__cs3_isr_fiq>:
 820:	eafffffe 	b	820 <__cs3_isr_fiq>

00000824 <__libc_init_array>:
 824:	e92d4070 	push	{r4, r5, r6, lr}
 828:	e59f506c 	ldr	r5, [pc, #108]	; 89c <__libc_init_array+0x78>
 82c:	e59f606c 	ldr	r6, [pc, #108]	; 8a0 <__libc_init_array+0x7c>
 830:	e0656006 	rsb	r6, r5, r6
 834:	e1b06146 	asrs	r6, r6, #2
 838:	12455004 	subne	r5, r5, #4
 83c:	13a04000 	movne	r4, #0
 840:	0a000005 	beq	85c <__libc_init_array+0x38>
 844:	e5b53004 	ldr	r3, [r5, #4]!
 848:	e2844001 	add	r4, r4, #1
 84c:	e1a0e00f 	mov	lr, pc
 850:	e12fff13 	bx	r3
 854:	e1560004 	cmp	r6, r4
 858:	1afffff9 	bne	844 <__libc_init_array+0x20>
 85c:	e59f5040 	ldr	r5, [pc, #64]	; 8a4 <__libc_init_array+0x80>
 860:	e59f6040 	ldr	r6, [pc, #64]	; 8a8 <__libc_init_array+0x84>
 864:	e0656006 	rsb	r6, r5, r6
 868:	eb000012 	bl	8b8 <_init>
 86c:	e1b06146 	asrs	r6, r6, #2
 870:	12455004 	subne	r5, r5, #4
 874:	13a04000 	movne	r4, #0
 878:	0a000005 	beq	894 <__libc_init_array+0x70>
 87c:	e5b53004 	ldr	r3, [r5, #4]!
 880:	e2844001 	add	r4, r4, #1
 884:	e1a0e00f 	mov	lr, pc
 888:	e12fff13 	bx	r3
 88c:	e1560004 	cmp	r6, r4
 890:	1afffff9 	bne	87c <__libc_init_array+0x58>
 894:	e8bd4070 	pop	{r4, r5, r6, lr}
 898:	e12fff1e 	bx	lr
 89c:	000008d0 	.word	0x000008d0
 8a0:	000008d0 	.word	0x000008d0
 8a4:	000008d0 	.word	0x000008d0
 8a8:	000008d8 	.word	0x000008d8

Disassembly of section .rodata:

000008b0 <_global_impure_ptr>:
 8b0:	00000950 00000043                       P...C...

000008b8 <_init>:
 8b8:	e1a0c00d 	mov	r12, sp
 8bc:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 8c0:	e24cb004 	sub	r11, r12, #4
 8c4:	e24bd028 	sub	sp, r11, #40	; 0x28
 8c8:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 8cc:	e12fff1e 	bx	lr

000008d0 <__init_array_start>:
 8d0:	0000073c 	.word	0x0000073c

000008d4 <__frame_dummy_init_array_entry>:
 8d4:	00000208                                ....

000008d8 <__libc_fini>:
 8d8:	e1a0c00d 	mov	r12, sp
 8dc:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 8e0:	e24cb004 	sub	r11, r12, #4
 8e4:	e24bd028 	sub	sp, r11, #40	; 0x28
 8e8:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 8ec:	e12fff1e 	bx	lr

000008f0 <__fini_array_start>:
 8f0:	000001c4 	.word	0x000001c4

000008f4 <__cs3_regions>:
	...
 900:	00000d80 	.word	0x00000d80
 904:	00000020 	.word	0x00000020

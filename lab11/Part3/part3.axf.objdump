
C:/Users/cse/Desktop/Lab11/Part3/part3.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
/* Program that finds the largest number in a list of integers	*/

				.text							// executable code follows
				.global	_start
_start:		
				LDR		R4, =RESULT		// R4 points to result location
   0:	e59f4060 	ldr	r4, [pc, #96]	; 68 <NUMBERS+0x1c>
				LDR		R0, [R4, #4]	// R0 holds the number of elements in the list
   4:	e5940004 	ldr	r0, [r4, #4]
				ADD		R1, R4, #8		// R1 points to the start of the list
   8:	e2841008 	add	r1, r4, #8
				BL			LARGE
   c:	eb000001 	bl	18 <LARGE>
				STR		R0, [R4]			// R0 holds the subroutine return value
  10:	e5840000 	str	r0, [r4]

00000014 <END>:

END:			B			END
  14:	eafffffe 	b	14 <END>

00000018 <LARGE>:
/* Subroutine to find the largest integer in a list
 * Parameters: R0 has the number of elements in the lisst
 *             R1 has the address of the start of the list
 * Returns: R0 returns the largest item in the list
*/
LARGE:		MOV		R2, R0			// use R2 to count the list elements
  18:	e1a02000 	mov	r2, r0
				LDR		R0, [R1]			// R0 holds the largest number found
  1c:	e5910000 	ldr	r0, [r1]

00000020 <LOOP>:
LOOP:			SUBS		R2, R2, #1		// decrement the loop counter
  20:	e2522001 	subs	r2, r2, #1
				BEQ		DONE
  24:	0a000005 	beq	40 <DONE>
				ADD		R1, R1, #4
  28:	e2811004 	add	r1, r1, #4
				LDR		R3, [R1]			// get the next number
  2c:	e5913000 	ldr	r3, [r1]
				CMP		R0, R3			// check if larger number found
  30:	e1500003 	cmp	r0, r3
				BGE		LOOP
  34:	aafffff9 	bge	20 <LOOP>
				MOV		R0, R3			// update the largest number
  38:	e1a00003 	mov	r0, r3
				B			LOOP
  3c:	eafffff7 	b	20 <LOOP>

00000040 <DONE>:
DONE:			MOV		PC, LR
  40:	e1a0f00e 	mov	pc, lr

00000044 <RESULT>:
  44:	00000000 	.word	0x00000000

00000048 <N>:
  48:	00000007 	.word	0x00000007

0000004c <NUMBERS>:
  4c:	00000004 	.word	0x00000004
  50:	00000005 	.word	0x00000005
  54:	00000003 	.word	0x00000003
  58:	00000006 	.word	0x00000006
  5c:	00000001 	.word	0x00000001
  60:	00000008 	.word	0x00000008
  64:	00000002 	.word	0x00000002
  68:	00000044 	.word	0x00000044
